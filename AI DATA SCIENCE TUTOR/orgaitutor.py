# -*- coding: utf-8 -*-
"""ORGAITUTOR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1XNkXm-StnWjRQisHr57qhUTc7FjWMcuf
"""

! pip install streamlit
!pip install langchain-google-genai
!pip install langchain langchain-google-genai google-generativeai
! pip install -U langchain-community

# Commented out IPython magic to ensure Python compatibility.
# %%writefile aitutor1.py
# import streamlit as st
# import uuid
# from langchain_google_genai import ChatGoogleGenerativeAI
# from langchain_core.runnables.history import RunnableWithMessageHistory
# from langchain_core.prompts import HumanMessagePromptTemplate
# from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
# from langchain_core.messages import SystemMessage
# from langchain_core.messages import SystemMessage, AIMessage, HumanMessage
# from langchain_core.output_parsers import StrOutputParser
# from langchain_community.chat_message_histories import SQLChatMessageHistory
# 
# # Load API Key
# with open("api.txt") as f:
#     API_KEY = f.read().strip()
# 
# # Initialize Chat Model
# chat_model = ChatGoogleGenerativeAI(google_api_key=API_KEY, model="gemini-1.5-pro")
# 
# # Define Chat Prompt Template
# chat_template = ChatPromptTemplate.from_messages([
#     SystemMessage(content="""You are an expert and intelligent Data Science tutor.
#         Engage in a helpful and interactive learning session for the users and clear their doubts with examples and give code if necessary.
#         Your answer should be crisp and easily understandable for the users. Maintain context based on previous discussions."""),
#     MessagesPlaceholder(variable_name="chat_history"),  # Stores previous chat
#     HumanMessagePromptTemplate.from_template("{human_input}")  # Latest query
# ])
# 
# # Initialize Output Parser
# chat_parser = StrOutputParser()
# 
# # Function to get session history from SQLite
# def get_session_message_history_from_db(session_id):
#     return SQLChatMessageHistory(session_id=session_id, connection="sqlite:///chat_history.db")
# 
# # Create Conversation Chain
# chain = chat_template | chat_model | chat_parser
# conversation_chain = RunnableWithMessageHistory(
#     chain,
#     get_session_message_history_from_db,
#     input_messages_key="human_input",
#     history_messages_key="chat_history"
# )
# 
# # Streamlit App Layout
# st.set_page_config(page_title="AI Data Science Tutor", page_icon="ðŸ¤–", layout="centered")
# 
# # Username Input
# if "username" not in st.session_state:
#     with st.form("user_form"):
#         username = st.text_input("Enter your name:", key="username_input")
#         submit = st.form_submit_button("Start Chat")
#         if submit and username.strip():
#             st.session_state.username = username.strip()
#             st.session_state.session_id = f"{username}_{uuid.uuid4().hex}"
#             st.session_state.chat_history = []
#             st.rerun()
# 
# else:
#     session_id = st.session_state.session_id
#     st.title(f"ðŸ¤– AI Data Science Tutor for {st.session_state.username}")
# 
#     # Get chat history from the database
#     chat_history = get_session_message_history_from_db(session_id)
# 
#     # âœ… FIX: Ensure session history updates with the database messages
#     if "chat_history" not in st.session_state:
#         st.session_state.chat_history = chat_history.messages.copy()
# 
#     # Sidebar - Chat History
#     with st.sidebar:
#         st.header("Chat History")
#         if st.session_state.chat_history:
#             first_message = next(
#                 (msg.content[:50] + "..." for msg in st.session_state.chat_history if isinstance(msg, HumanMessage)),
#                 "No chat history yet."
#             )
#             st.text(first_message)
# 
#             # Convert chat history to text format
#             chat_text = "\n\n".join([f"{type(msg).__name__}: {msg.content}" for msg in st.session_state.chat_history])
#             chat_txt = chat_text.encode('utf-8')
#             st.download_button("Download", chat_txt, "chat_history.txt", "text/plain")
#         else:
#             st.write("No chat history yet.")
# 
#     # Chat Interface
#     st.subheader("Ask Your Questions")
#     chat_container = st.container()
# 
#     # âœ… FIX: Display messages correctly in the chat UI
#     with chat_container:
#         for msg in st.session_state.chat_history:
#             role = "You" if isinstance(msg, HumanMessage) else "AI Tutor"
#             with st.chat_message("user" if isinstance(msg, HumanMessage) else "assistant"):
#                 st.write(f"**{role}:** {msg.content}")
# 
#     # User Input
#     human_input = st.chat_input("Ask me a question:")
# 
#     if human_input:
#         with st.chat_message("user"):
#             st.write(f"**You:** {human_input}")
# 
#         # âœ… FIX: Send only the latest user message but keep chat history in context
#         response = conversation_chain.invoke(
#             {"human_input": human_input, "chat_history": st.session_state.chat_history},
#             config={"configurable": {"session_id": session_id}}
#         )
# 
#         # âœ… FIX: Append only new messages (avoids repetition)
#         chat_history.add_user_message(human_input)
#         chat_history.add_ai_message(response)
#         st.session_state.chat_history.append(HumanMessage(content=human_input))
#         st.session_state.chat_history.append(AIMessage(content=response))
# 
#         with st.chat_message("assistant"):
#             st.write(f"**AI Tutor:** {response}")

!npm install localtunnel
!streamlit run /content/aitutor1.py &>/content/logs.txt &
!npx localtunnel --port 8501 & curl ipv4.icanhazip.com